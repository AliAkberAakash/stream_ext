{"name":"Stream ext","tagline":"Extension and helper functions for working with Stream in Dart","body":"# Getting started with stream_ext\r\n\r\nLearn about the extension functions for working with `Stream` type with `stream_ext`.\r\n\r\n### merge\r\n\r\nThe `StreamExt.merge` function merges two stream into a single unitifed output stream.\r\n\r\nThe merged stream will forward any events and errors received from the input streams and will complete if:\r\n* both input streams have completed\r\n* the `closeOnError` flag is set to true and an error is received from either input stream\r\n\r\nExample:\r\n\r\n    // the input streams\r\n    var stream1   = new StreamController.broadcast().stream;\r\n    var stream2   = new StreamController.broadcast().stream;\r\n\r\n    // the merged output stream\r\n    var merged\t  = StreamExt.merge(stream1, stream2);\r\n\r\n\r\n### combineLatest\r\n\r\nThe `StreamExt.combineLastest` merges two streams into one stream by using the selector function whenever one of the streams produces an event.\r\n\r\nThe merged stream will complete if:\r\n* both input streams have completed\r\n* [closeOnError] flag is set to true and an error is received\r\n\r\nExample\r\n\r\n    // the input streams\r\n    var stream1   = new StreamController.broadcast().stream;\r\n    var stream2   = new StreamController.broadcast().stream;\r\n\r\n    // the merged output stream\r\n    var merged\t  = StreamExt.combineLatest(stream1, stream2, (a, b) => a + b);\r\n\r\n\r\n### delay\r\n\r\nThe `StreamExt.delay` function creates a new stream whose events are directly sourced from the input stream but each delivered after the specified duration.\r\n\r\nThe delayed stream will complete if:\r\n* the input has completed and the delayed complete message has been delivered\r\n* the `closeOnError` flag is set to true and an error is received from the input stream\r\n\r\nExample\r\n\r\n    var input   = new StreamController.broadcast().stream;\r\n\r\n    // each event from the input stream is delivered 1 second after it was originally received\r\n    var delayed\t= StreamExt.delay(input, new Duration(seconds : 1));\r\n\r\n\r\n### throttle\r\n\r\nThe `StreamExt.throttle` function creates a new stream based on events produced by the specified input, upon forwarding an event from the input stream it'll ignore any subsequent events produced by the input stream until the the flow of new events has paused for the specified duration, after which the last event produced by the input stream is then delivered.\r\n\r\nThe throttled stream will complete if:\r\n* the input stream has completed and the any throttled message has been delivered\r\n* the `closeOnError` flag is set to true and an error is received from the input stream\r\n\r\nExample\r\n\r\n    var input   = new StreamController.broadcast().stream;\r\n    var delayed\t= StreamExt.throttle(input, new Duration(seconds : 1));\r\n\r\n\r\n### zip\r\n\r\nThe `StreamExt.zip` function zips two streams into one by combining their elements in a pairwise fashion.\r\n\r\nThe zipped stream will complete if:\r\n* either input stream has completed\r\n* [closeOnError] flag is set to true and an error is received\r\n\r\nExample\r\n\r\n    var mouseMove = document.onMouseMove;\r\n    var mouseDrags =\r\n      StreamExt\r\n        .zip(mouseMove,\r\n             mouseMove.skip(1),\r\n             (MouseEvent left, MouseEvent right) => new MouseMove(right.screen.x - left.screen.x, right.screen.y - left.screen.y))\r\n        .where((_) => isDragging);\r\n\r\n\r\n### window\r\n\r\nThe `StreamExt.window` function projects each element from the input stream into consecutive non-overlapping windows.\r\nEach element proudced by the output stream contains a list of elements up to the specified count.\r\n\r\nThe output stream will complete if:\r\n* the input stream has completed and any buffered elements have been upshed\r\n* [closeOnError] flag is set to true and an error is received\r\n\r\nExample\r\n\r\n    var input \t = new StreamController.broadcast().stream;\r\n    var windowed = StreamExt.window(input, 3);\r\n\r\n\r\n### buffer\r\n\r\nThe `StreamExt.buffer` function creates a new stream which buffers elements from the input stream produced within the sepcified duration.\r\nEach element produced by the output stream is a list.\r\n\r\nThe output stream will complete if:\r\n* the input stream has completed and any buffered elements have been upshed\r\n* [closeOnError] flag is set to true and an error is received\r\n\r\nExample\r\n\r\n    var input \t = new StreamController.broadcast().stream;\r\n    var buffered = StreamExt.buffer(input, new Duration(seconds : 1));\r\n\r\n\r\n### scan\r\n\r\nThe `StreamExt.scan` function creates a new stream by applying an accumulator function over the elements produced by the input stream and\r\nreturns each intermediate result with the specified seed and accumulator.\r\n\r\nThe output stream will complete if:\r\n* the input stream has completed\r\n* [closeOnError] flag is set to true and an error is received\r\n\r\nExample\r\n\r\n    var input \t= new StreamController.broadcast().stream;\r\n    \r\n    // create running totals\r\n    var sums \t= StreamExt.scan(input, 0, (acc, elem) => acc + elem);\r\n\r\n\r\n### sum/min/max\r\n\r\nThe `StreamExt.sum`, `StreamExt.min` and `StreamExt.max` functions returns an aggregated value (be it the sum, min or max) from the input `Stream` and return the aggregate as a `Future` which is completed when the input `Stream` is finshed.\r\n\r\nNot that with these functions, if the function passed in for the aggregation (e.g. the `compare` function for min and max) throws an exception, then depending on the `closeOnError` flag the methods will behave differently:\r\n\r\n* if `closeOnError` flag is ture, then the returned `Future` completes with the thrown exception, so you will want to call `.catchError` on the result to handle this in your code\r\n* otherwise, any exceptions will be swallowed and the input value that causes the exception will also be excluded from the aggregated value\r\n\r\nExample\r\n\r\n    // assuming inputs are of numeric value\r\n    var input \t= new StreamController.broadcast().stream;\r\n    \r\n    Future sum \t= StreamExt.sum(input);\r\n    Future min  = StreamExt.min(input, (a, b) => a.compareTo(b));\r\n    Future max  = StreamExt.max(input, (a, b) => a.compareTo(b));\r\n    \r\n\r\n## Examples\r\n\r\nPlease take a look at the **example** directory for more complete and meaningful usages of each of the extension functions.\r\n\r\n## Package Import\r\n\r\nAdd the `stream_ext` depedency to your pubspec.yaml ...\r\n\r\n    name: hello_world\r\n    description: hello world\r\n    dependencies:\r\n      stream_ext: { git: https://github.com/theburningmonk/stream_ext.git }\r\n\r\n... then import the library in your Dart code.\r\n\r\n    import 'package:stream_ext/stream_ext.dart';","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}